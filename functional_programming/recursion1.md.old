---
hide:
#  - navigation # Hide navigation
 - toc        # Hide table of contents
---

# Стек викликів

> ***Стек викликів (call stack)*** — це структура даних у вигляді стека, яка зберігає інформацію про активні підпрограми комп'ютерної програми. Такий тип стека також відомий під назвами стек виконання, стек управління або рантайм стек, часто скорочується до просто "стек". Хоча підтримка функціонування стека викликів дуже важлива для будь-якої програми, деталі роботи зі стеком зазвичай приховані під час роботи з високорівневими мовами програмування. 

Стек викликів використовується для декількох пов'язаних цілей, 
але головне його призначення — відслідковувати точку повернення з кожної активної підпрограми, 
тобто адресу інструкції куди має бути повернуте виконання після завершення підпрограми. 
Активними підпрограмами вважаються такі, що були викликані, але ще не завершили виконання поверненням.

	def a(param):
		return b(param)
		
	def b(param):
		return c(param)
		
	def c(param):
		return 1 / param

	a(0)
	
У зв'язку з тим, що стек викликів влаштований як стек, 
підпрограма, що викликається, 
заштовхує адресу повернення на верхівку стека, а підпрограма яку викликають, після завершення своєї роботи, виштовхує адресу повернення зі стека і повертає керування інструкції за цією адресою. 
Якщо підпрограма, яку викликали викликає іншу підпрограму або рекурсивно саму себе, 
тоді вона заштовхує наступну адресу повернення на верхівку стека, і т.д. 
Якщо розмір стека поглинає увесь виділений під стек простір, 
тоді виникає помилка ***переповнення стека*** (stack overflow), 
яка зазвичай призводить до краху програми. 
Додавання запису про підпрограму іноді називається ***намотування*** (winding); 
відповідно, видалення запису — ***розмотування*** (unwinding). 

Стек викликів може мати додаткові призначення, залежно від мови програмування і архітектури комп'ютера. 
Серед них можуть бути: 

* Локальне сховище даних – Підпрограма часто потребує пам'ять для збереження значень локальних змінних, змінних значення яких відомі тільки під час виконання підпрограми і не зберігаються по виході з неї. Часто буває зручно виділяти для таких змінних місце просто рухаючи верхівку стека достатньо, щоб забезпечити необхідний простір. Це дуже швидке рішення у порівнянні з розташуванням в купі. Зауважимо, що кожна окрема підпрограма має свій окремий простір у стеку для локальних змінних.
* Передача параметрів – Підпрогами часто вимагають від коду, що їх викликає параметри, і розташування значень цих параметрів у стеку не є незвичним рішенням. Якщо параметрів всього декілька і їхній розмір малий, тоді для передачі їх в підпрограму можна використати регістри процесора, але якщо розмір парамерів не дозволяє зужиткувати цей спосіб передачі, буде необхідний простір в пам'яті. Стек добре працює для передачі таких параметрів, особливо через те, що з кожним викликом наступної підпрограми значення параметрів змінюються, щоразу для них виділяється окреме місце.
* Стек обчислення – Операнди арифметичних або логічних операцій зазвичай розташовують в регістрах і тоді провадять над ними певні дій. Однак, в деяких ситуаціях операнди можуть накопичуватися до довільної глибини, тоді постає питання використання чогось відмінного від регістрів. Стек подібних операндів, скоріше схожий на RPN калькулятор, називається стеком обчислення, і може розташовуватися у стеку викликів.
* Вказівник на поточний об'єкт - Деякі об’єктозорієнтовані мови програмування (наприклад, C++),при виклику функції зберігають вказівник this разом з аргументами функції у стеку. Вказівник this вказує на об'єкт пов'язаний з методом, що викликається.

та інші.
